# 格雷编码是一个二进制数字系统，在该系统中，两个连续的数值仅有一个位数的差异。
# 给定一个代表编码总位数的非负整数 n，打印其格雷编码序列。格雷编码序列必须以 0 开头。
# 示例 1:
# 输入: 2
# 输出: [0,1,3,2]
# 解释:
# 00 - 0
# 01 - 1
# 11 - 3
# 10 - 2
# 对于给定的 n，其格雷编码序列并不唯一。
# 例如，[0,2,3,1] 也是一个有效的格雷编码序列。
# 00 - 0
# 10 - 2
# 11 - 3
# 01 - 1
# 示例 2:
# 输入: 0
# 输出: [0]
# 解释: 我们定义格雷编码序列必须以 0 开头。
#      给定编码总位数为 n 的格雷编码序列，其长度为 2^n。当 n = 0 时，长度为 2^0 = 1。
#      因此，当 n = 0 时，其格雷编码序列为 [0]。

'''
start: [0]
i = 0:          [0]
i = 1:          [0, 1]
                  nums[1] = nums[0] + 1         #1: 2 ** 0
i = 2:          [0, 1, 3, 2]
                  nums[2:4] = nums[1: : -1] + 2         #2: 2 ** 1
i = 3:          [0, 1, 3, 2, 6, 7, 5 ,4]
                 nums[4:8] = nums[3:: -1] + 4                  #4: 2 ** 2
similarly, we have nums[2**(i-1):2**i] =  nums[2**(i-1)-1::-1] + 2**(i-1)    
'''
'''
或者
如果n = 1，那么编码为[0, 1]；
n = 2，编码为[00, 10, 11, 01]；
n = 3，编码为[000, 100, 110, 010, 011, 111, 101, 001]；
所以，n级的编码的生成，是从n - 1编码的最后一个编码开始倒序遍历，每遍历一个编码，就将这个编码+1后的码字添加到结果列表的后面，然后再将这个编码+0。
'''
class Solution:
    def grayCode(self, n):
        result = [0]
        for i in range(n):
            result += [2 ** (i) + j for j in result[::-1]]
        return result
aa = Solution().grayCode(3)
print(aa)